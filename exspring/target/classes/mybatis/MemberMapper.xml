<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!--namespace는 현재 파일에 정의된 sql문 집합의 고유한 이름 -->
  <!-- 보통은 sql문을 실행할 Dao 인터페이스 이름으로 설정 -->
<mapper namespace="com.exam.exspring.member.MemberDao">

<!-- com.exam.member.MemberVo 객체의  -->
	<!--2.레절트 맵을 이용하여 매핑하주거나  -->
	<resultMap type="MemberVo" id="memberMap">
	<!-- memId 속성(변수,필드)에 mem_id 컬럼 값을 저장 -->
		<!--pk컬럼은 result 태그 대신 id 태그를 사용한다.  -->
		<id property="memId" column="mem_id" />
		<result property="memPass" column="mem_pass" />
		<result property="memName" column="mem_name" />
		<result property="memPoint" column="mem_point" />
	</resultMap>

<!-- sql문의 종류와 동일한 이름의 태그를 사용하여 sql문을 등록
	id는 현재 파일 내에서 현재 sql문의 고유한 이름
	보통은 sql문을 실행할 Dao 인터페이스의 메서드 이름으로 설정 -->
	<!-- sql문 실행결과 1개의 레코드를 담을 객체의 클래스명을 resultType속성에 지정 -->
	<!-- 마이바티스는 기본적으로 resultType객체의 컬럼이름과 동일한 이름의 변수(속성,필드)에 컬럼의 값을 저장 -->
	
  <!--0.기본sql문 이대로 하면 데이터 자료가 나오지않는다. -->	
  <!-- <select id="selectMemberList" resultType="com.exam.member.MemberVo"> -->
  <!--    SELECT mem_id,mem_pass,mem_name,mem_point FROM MEMBER -->
  
  <!--1.sql문을 별명을 주거나  -->
  <!-- SELECT mem_id as memId,mem_pass as memPass,mem_name as memName,mem_point as memPoint FROM MEMBER -->
  <!-- as 생략해도 가능하다 -->
  <!--  SELECT mem_id memId,mem_pass memPass,mem_name memName,mem_point memPoint FROM MEMBER  -->
   
   
   <!--2.레절트 맵을 이용하여 매핑하주거나  -->
  <!--  <select id="selectMemberList" resultMap="memberMap">
   SELECT mem_id,mem_pass,mem_name,mem_point FROM MEMBER -->
   
    <!--3.mapUnderscoreToCamelCase 세팅을 통해 매핑하주거나  -->
   <select id="selectMemberList" resultMap="memberMap">
   SELECT mem_id,mem_name,mem_point FROM MEMBER
  
  </select>
  
  
  <!--수정 sql -->
   <select id="selectMember" parameterType="string" resultMap="memberMap">
   SELECT mem_id,mem_name,mem_point FROM MEMBER WHERE mem_id= #{memId}
  </select>
  
  <insert id="insertMember" parameterType="memberVO">
  INSERT into MEMBER 
  (mem_id,mem_pass,mem_name,mem_point)			
  VALUES(#{memId},#{memPass},#{memName},#{memPoint})
  </insert>
  
  <update id="updatetMember" parameterType="memberVO">
  UPDATE MEMBER 
  SET mem_name=#{memName},mem_point=#{memPoint}			
  WHERE mem_id=#{memId}
  </update>
  
  
  <delete id="delMember" parameterType="string">
  <!-- 단일값을 갖는 파라미터를 받은 경우에는 속성(변수)이름이 무의미 -->
  DELETE from MEMBER where mem_id = #{memId}
  </delete>
  
  <select id="selectLoginMember" parameterType="memberVO" resultMap="memberMap">
   SELECT mem_id,mem_name,mem_point FROM MEMBER 
   WHERE mem_id= #{memId} and mem_pass= #{memPass}
  </select>
  
</mapper>